modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.2');
modeltype PCMSEFF uses pcm::seff('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2');
modeltype PCMSEFF_PERFORMANCE uses pcm::seff::seff_performance('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2');
modeltype PCM_RESOURCETYPE uses pcm::resourcetype('http://palladiosimulator.org/PalladioComponentModel/5.2');
modeltype PCM_USG uses pcm::usagemodel('http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2');

library Constructors();


constructor RequiredDelegationConnector :: RequiredDelegationConnector(assemblyContext : AssemblyContext, innerRequiredRole : OperationRequiredRole, outerRequiredRole : OperationRequiredRole){
	var system : System := resolveone(System);
	entityName := "RequiredDelegation " + innerRequiredRole.entityName + "_" + outerRequiredRole.entityName;
	assemblyContext_RequiredDelegationConnector := assemblyContext;
	innerRequiredRole_RequiredDelegationConnector := innerRequiredRole;
	outerRequiredRole_RequiredDelegationConnector := outerRequiredRole;
	parentStructure__Connector := system;
}

constructor RequiredInfrastructureDelegationConnector :: RequiredInfrastructureDelegationConnector(assemblyContext : AssemblyContext, innerRequiredRole : InfrastructureRequiredRole, outerRequiredRole : InfrastructureRequiredRole){
	var system : System :=  assemblyContext.parentStructure__AssemblyContext[System]->any(true);

	entityName := "RequiredDelegation " + innerRequiredRole.entityName + "_" + outerRequiredRole.entityName;
	assemblyContext__RequiredInfrastructureDelegationConnector := assemblyContext;
	innerRequiredRole__RequiredInfrastructureDelegationConnector := innerRequiredRole;
	outerRequiredRole__RequiredInfrastructureDelegationConnector := outerRequiredRole;
	parentStructure__Connector := system;
}

constructor AssemblyConnector :: AssemblyConnector(requiringAssemblyContext : AssemblyContext,requiredRole:OperationRequiredRole, providedRole: OperationProvidedRole, providingAssemblyContext : AssemblyContext){
	var system : System :=  requiringAssemblyContext.parentStructure__AssemblyContext[System]->any(true);
	entityName := requiringAssemblyContext.entityName + "_" + providingAssemblyContext.entityName;
	providingAssemblyContext_AssemblyConnector := providingAssemblyContext;
	requiringAssemblyContext_AssemblyConnector := requiringAssemblyContext;
	providedRole_AssemblyConnector := providedRole;
	requiredRole_AssemblyConnector := requiredRole;
	parentStructure__Connector := system;
}

constructor AssemblyInfrastructureConnector :: AssemblyInfrastructureConnector(requiringAssemblyContext : AssemblyContext,requiredRole:InfrastructureRequiredRole, providedRole: InfrastructureProvidedRole, providingAssemblyContext : AssemblyContext){
	var system : System :=  requiringAssemblyContext.parentStructure__AssemblyContext[System]->any(true);
	entityName := requiringAssemblyContext.entityName + "_" + providingAssemblyContext.entityName;
	providingAssemblyContext__AssemblyInfrastructureConnector := providingAssemblyContext;
	requiringAssemblyContext__AssemblyInfrastructureConnector := requiringAssemblyContext;
	providedRole__AssemblyInfrastructureConnector := providedRole;
	requiredRole__AssemblyInfrastructureConnector := requiredRole;
	parentStructure__Connector := system;
}

constructor LinkingResource :: LinkingResource (resourceContainer : ResourceContainer, latency : String, throughput : String){
	connectedResourceContainers_LinkingResource := resourceContainer;
	resourceEnvironment_LinkingResource := resourceContainer.resourceEnvironment_ResourceContainer;
	communicationLinkResourceSpecifications_LinkingResource := new CommunicationLinkResourceSpecification(resourceContainer,latency,throughput);
}

constructor CommunicationLinkResourceSpecification :: CommunicationLinkResourceSpecification(resourceContainer : ResourceContainer, latency : String, throughput : String){
	latency_CommunicationLinkResourceSpecification := new PCMRandomVariable(latency);
	throughput_CommunicationLinkResourceSpecification := new PCMRandomVariable(throughput);
	communicationLinkResourceType_CommunicationLinkResourceSpecification := resourceContainer.activeResourceSpecifications_ResourceContainer.activeResourceType_ActiveResourceSpecification.resourceRepository_ResourceType.availableResourceTypes_ResourceRepository->selectByType(CommunicationLinkResourceType)->selectOne(resourceType : ResourceType |resourceType.id = "_o3sScH2AEdyH8uerKnHYug");
}

constructor AllocationContext :: AllocationContext (ac : AssemblyContext, rc: ResourceContainer){
	var allocation : Allocation := resolveone(Allocation);
	entityName := "Allocation_" + ac.entityName;
	assemblyContext_AllocationContext := ac;
	resourceContainer_AllocationContext := rc;
	allocation_AllocationContext := allocation;
}

constructor ProcessingResourceSpecification:: ProcessingResourceSpecification(p:ProcessingResourceSpecification, rc : ResourceContainer){
	MTTF := p.MTTF;
	MTTR := p.MTTR;
	schedulingPolicy := p.schedulingPolicy;
	requiredByContainer := p.requiredByContainer;
	processingRate_ProcessingResourceSpecification := new PCMRandomVariable(p.processingRate_ProcessingResourceSpecification);
	numberOfReplicas := p.numberOfReplicas;
	activeResourceType_ActiveResourceSpecification := p.activeResourceType_ActiveResourceSpecification;
	resourceContainer_ProcessingResourceSpecification := rc;
}

/**Creates a PCMRandomVariable from an existing PCMRandomVariable
*/
constructor PCMRandomVariable :: PCMRandomVariable(pcmRandomVariable:PCMRandomVariable){
	specification := pcmRandomVariable.specification;
}

/**Creates a PCMRandomVariable with a specified input parameter
*/
constructor PCMRandomVariable :: PCMRandomVariable(spec:String){
	specification := spec;
}

constructor ResourceContainer :: ResourceContainer(originalResourceContainer : ResourceContainer, rcName : String){
	entityName := originalResourceContainer.entityName + rcName;
	resourceEnvironment_ResourceContainer := originalResourceContainer.resourceEnvironment_ResourceContainer;
	
	if(originalResourceContainer.nestedResourceContainers__ResourceContainer->size()>0)	{
		nestedResourceContainers__ResourceContainer := originalResourceContainer.duplicateNestedResourceContainer();
	};
	
	activeResourceSpecifications_ResourceContainer += originalResourceContainer.activeResourceSpecifications_ResourceContainer -> forEach(activeResource){
		new ProcessingResourceSpecification(activeResource, result);
	};
} 

helper ResourceContainer::duplicateNestedResourceContainer():Set(ResourceContainer){
	var nestedResourceContainer : Set(ResourceContainer);
	self.nestedResourceContainers__ResourceContainer->forEach(rc){
		nestedResourceContainer += new ResourceContainer(rc, rc.entityName);	
	};

	return nestedResourceContainer;
}

constructor AssemblyContext :: AssemblyContext(bc : RepositoryComponent) {
	entityName := "Assembly_"+bc.entityName;
	encapsulatedComponent__AssemblyContext := bc;
	var allocation : Allocation := resolveone(Allocation);
	var system : System := allocation.system_Allocation![System];
	parentStructure__AssemblyContext := system;
}

constructor BasicComponent :: BasicComponent (loadBalancedComponent : RepositoryComponent, numberOfReplicas: Integer)
{
	var repository := resolveone(Repository);
	var providedRoles : Set(ProvidedRole) := loadBalancedComponent.providedRoles_InterfaceProvidingEntity;
	entityName := "LoadBalancer_"+ loadBalancedComponent.entityName;
	log(entityName);
	repository__RepositoryComponent := repository;
	log('size of provided roles '+providedRoles->size().toString());
	providedRoles -> forEach(providedRole){
		if(providedRole.oclIsTypeOf(OperationProvidedRole)){
			var counter : Integer := 1;
			providedRoles_InterfaceProvidingEntity += new OperationProvidedRole(providedRole.oclAsType(OperationProvidedRole));
			while(counter<= (numberOfReplicas)){
			log('operation required roles+replicas:'+numberOfReplicas.toString());
				requiredRoles_InterfaceRequiringEntity += new OperationRequiredRole(providedRole.oclAsType(OperationProvidedRole),counter);
				counter := counter+1;
			};
		}else if(providedRole.oclIsTypeOf(InfrastructureProvidedRole)){
			var counter : Integer := 1;
			providedRoles_InterfaceProvidingEntity += new InfrastructureProvidedRole(providedRole.oclAsType(InfrastructureProvidedRole));
			while(counter<= (numberOfReplicas)){
				requiredRoles_InterfaceRequiringEntity += new InfrastructureRequiredRole(providedRole.oclAsType(InfrastructureProvidedRole),counter);
				counter := counter+1;
			};
		};
	};
	
	componentParameterUsage_ImplementationComponentType := loadBalancedComponent[ImplementationComponentType].componentParameterUsage_ImplementationComponentType;
	
	providedRoles_InterfaceProvidingEntity -> forEach(providedRole){
	if(providedRole.oclIsTypeOf(OperationProvidedRole)){
		var operationProvidedRole := providedRole.oclAsType(OperationProvidedRole);
		var operationInterface := operationProvidedRole.providedInterface__OperationProvidedRole;
		var operationRequiredRoles : Set(OperationRequiredRole) := requiredRoles_InterfaceRequiringEntity ->selectByType(OperationRequiredRole);
		var requiredRolesWithSameInterfaceAsProvidedRole : Set(OperationRequiredRole) := operationRequiredRoles -> select(operationRequiredRole : OperationRequiredRole | operationRequiredRole.requiredInterface__OperationRequiredRole.id = operationInterface.id);
		operationInterface.signatures__OperationInterface->forEach(operationSignature){
	  		serviceEffectSpecifications__BasicComponent += new ResourceDemandingSEFF(operationSignature, requiredRolesWithSameInterfaceAsProvidedRole);
		};
		}else if(providedRole.oclIsTypeOf(InfrastructureProvidedRole)){
			var infrastructureProvidedRole := providedRole.oclAsType(InfrastructureProvidedRole);
			var infrastructureInterface := infrastructureProvidedRole.providedInterface__InfrastructureProvidedRole;
			var infrastructureRequiredRoles : Set(InfrastructureRequiredRole) := requiredRoles_InterfaceRequiringEntity ->selectByType(InfrastructureRequiredRole);
			var requiredRolesWithSameInterfaceAsProvidedRole : Set(InfrastructureRequiredRole) := infrastructureRequiredRoles -> select(infrastructureRequiredRole : InfrastructureRequiredRole | infrastructureRequiredRole.requiredInterface__InfrastructureRequiredRole.id = infrastructureInterface.id);
			infrastructureInterface.infrastructureSignatures__InfrastructureInterface->forEach(infrastructureSignature){
  				serviceEffectSpecifications__BasicComponent += new ResourceDemandingSEFF(infrastructureSignature, requiredRoles_InterfaceRequiringEntity[InfrastructureRequiredRole]);
	};
		};
	}
}


/*
* Constructor of PBT that also copies the children of the ExternalCallAction i.e., variable characterizations.
*/
constructor ProbabilisticBranchTransition :: ProbabilisticBranchTransition (operationSignature:OperationSignature, reqRole:OperationRequiredRole, originalExtCallAction : ExternalCallAction) {
	entityName := "Branch for "+ reqRole.entityName;
	branchProbability := 1.0;
	log('size of inputvar '+ originalExtCallAction.inputVariableUsages__CallAction->size().toString());
    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
    	var innerStartAction : StartAction := object StartAction{};
    	var delegatingExternalCallAction : ExternalCallAction := object ExternalCallAction{
    		predecessor_AbstractAction := innerStartAction;
    		entityName := "Call "+ operationSignature.entityName;
    		role_ExternalService := reqRole;
    		calledService_ExternalService := operationSignature;
    		inputVariableUsages__CallAction := originalExtCallAction.inputVariableUsages__CallAction.deepclone();
    		
    	};
    	var innerStopAction : StopAction := object StopAction{
			predecessor_AbstractAction := delegatingExternalCallAction;
		};
		
		
		steps_Behaviour += innerStartAction;
		steps_Behaviour += delegatingExternalCallAction;
		steps_Behaviour += innerStopAction;
    };
}



constructor ProbabilisticBranchTransition :: ProbabilisticBranchTransition (operationSignature:OperationSignature, reqRole:OperationRequiredRole) {
	entityName := "Branch for "+ reqRole.entityName;
	branchProbability := 1.0;
    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
    	var innerStartAction : StartAction := object StartAction{};
    	var delegatingExternalCallAction : ExternalCallAction := object ExternalCallAction{
    		predecessor_AbstractAction := innerStartAction;
    		entityName := "Call "+ operationSignature.entityName;
    		role_ExternalService := reqRole;
    		calledService_ExternalService := operationSignature;
    	};
    	var innerStopAction : StopAction := object StopAction{
			predecessor_AbstractAction := delegatingExternalCallAction;
		};
		
		steps_Behaviour += innerStartAction;
		steps_Behaviour += delegatingExternalCallAction;
		steps_Behaviour += innerStopAction;
    };
}




constructor BranchTransition :: BranchTransition (operationSignature:OperationSignature, providedRole:OperationProvidedRole) {
	branchProbability := 1.0;
	branchedBehaviour_BranchTransition := object ScenarioBehaviour {
		var innerStartAction : Start := object Start{};
		var delegatingExternalCallAction : EntryLevelSystemCall := object EntryLevelSystemCall {
			predecessor := innerStartAction;
			providedRole_EntryLevelSystemCall := providedRole;
			operationSignature__EntryLevelSystemCall := operationSignature;
			entityName := "ELSC " + operationSignature.entityName;
		};
		var innerStop : Stop := object Stop {
			predecessor := delegatingExternalCallAction;
		};
		actions_ScenarioBehaviour += innerStartAction;
		actions_ScenarioBehaviour += delegatingExternalCallAction;
		actions_ScenarioBehaviour += innerStop;
	};
};


constructor ResourceDemandingSEFF :: ResourceDemandingSEFF (operationSignature : OperationSignature, requiredRoles : Set(OperationRequiredRole)){
	describedService__SEFF := operationSignature;
	var startAction : StartAction := object StartAction{};
	var branchAction : BranchAction := object BranchAction{
		entityName := "LoadBalancer Branch";
		predecessor_AbstractAction := startAction;
		
		requiredRoles->forEach(requiredRole){
		    var probability : Real := 1.0 / requiredRoles->size();
			branches_Branch += object ProbabilisticBranchTransition{
			    entityName := "Branch for "+requiredRole.entityName;
			    branchProbability := probability;
			    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
			    	var innerStartAction : StartAction := object StartAction{};
			    	var delegatingExternalCallAction : ExternalCallAction := object ExternalCallAction{
			    		predecessor_AbstractAction := innerStartAction;
			    		entityName := "Call "+operationSignature.entityName;
			    		role_ExternalService := requiredRole;
			    		calledService_ExternalService := operationSignature;
			    	};
			    	var innerStopAction : StopAction := object StopAction{
						predecessor_AbstractAction := delegatingExternalCallAction;
					};
					
					steps_Behaviour += innerStartAction;
					steps_Behaviour += delegatingExternalCallAction;
					steps_Behaviour += innerStopAction;
			    };
			};
		};
	};
	var stopAction : StopAction := object StopAction{
		predecessor_AbstractAction := branchAction;
	};
	steps_Behaviour += startAction;
	steps_Behaviour += branchAction;
	steps_Behaviour += stopAction;
}

constructor ResourceDemandingSEFF::ResourceDemandingSEFF (infrastructureSignature : InfrastructureSignature, requiredRoles : Set(InfrastructureRequiredRole)){
	describedService__SEFF := infrastructureSignature;
	var startAction : StartAction := object StartAction{};
	var branchAction : BranchAction := object BranchAction{
		entityName := "LoadBalancer Branch";
		predecessor_AbstractAction := startAction;
		
		requiredRoles->forEach(requiredRole){
		    var probability : Real := 1.0 / requiredRoles->size();
			branches_Branch += object ProbabilisticBranchTransition{
			    entityName := "Branch for "+requiredRole.entityName;
			    branchProbability := probability;
			    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
			    	var innerStartAction : StartAction := object StartAction{};
			    	var internalCallAction : InternalAction:= object InternalAction{
			    		entityName := "Call "+infrastructureSignature.entityName;
			    		predecessor_AbstractAction := innerStartAction;
			    		infrastructureCall__Action := object InfrastructureCall{
			    			entityName := "InfrastructureCall " + requiredRole.entityName;
			    			signature__InfrastructureCall := infrastructureSignature;
			    			requiredRole__InfrastructureCall := requiredRole;
			    			numberOfCalls__InfrastructureCall := new PCMRandomVariable("1");
			    		};
			    	};
			    	var innerStopAction : StopAction := object StopAction{
						predecessor_AbstractAction := internalCallAction;
					};
					
					steps_Behaviour += innerStartAction;
					steps_Behaviour += internalCallAction;
					steps_Behaviour += innerStopAction;
			    };
			};
		};
	};
	var stopAction : StopAction := object StopAction{
		predecessor_AbstractAction := branchAction;
	};
	steps_Behaviour += startAction;
	steps_Behaviour += branchAction;
	steps_Behaviour += stopAction;
}	

constructor OperationProvidedRole :: OperationProvidedRole(pr:OperationProvidedRole){
	entityName := "Provided_" + pr.providedInterface__OperationProvidedRole.entityName + "_LoadBalancer";
	providedInterface__OperationProvidedRole := pr.providedInterface__OperationProvidedRole;
}

constructor OperationRequiredRole :: OperationRequiredRole(rr:OperationProvidedRole, i:Integer){
	entityName := "Required_" + rr.providedInterface__OperationProvidedRole.entityName +"_LoadBalancer_"+i.toString();
	requiredInterface__OperationRequiredRole := rr.providedInterface__OperationProvidedRole;
}

constructor InfrastructureProvidedRole::InfrastructureProvidedRole(providedRole : InfrastructureProvidedRole){
	entityName := "Provided_" + providedRole.providedInterface__InfrastructureProvidedRole.entityName + "_LoadBalancer";
	providedInterface__InfrastructureProvidedRole := providedRole.providedInterface__InfrastructureProvidedRole;
}

constructor InfrastructureRequiredRole::InfrastructureRequiredRole(providedRole : InfrastructureProvidedRole, counter : Integer){
	entityName := "Required_" + providedRole.providedInterface__InfrastructureProvidedRole.entityName +"_LoadBalancer_"+counter.toString();
	requiredInterface__InfrastructureRequiredRole := providedRole.providedInterface__InfrastructureProvidedRole;
}