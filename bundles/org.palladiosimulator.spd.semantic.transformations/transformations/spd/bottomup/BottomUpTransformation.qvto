import BottomUpTransformationInfrastructure;
import BottomUpTransformationServices;
import spd.common.ResourceEnvironmentTransformation;

modeltype PCM uses 'http://palladiosimulator.org/PalladioComponentModel/5.2';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';

modeltype SPD_MOD uses 'http://palladiosimulator.org/ScalingPolicyDefinition/1.0';
modeltype SPD_ADJ uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Adjustments/1.0';
modeltype SPD_TRI uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Triggers/1.0';
modeltype SPD_TAR uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Targets/1.0';

modeltype SPD_CON uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/1.0';
modeltype SPD_CONP uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/Policy/1.0';
modeltype SPD_CONT uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/Target/1.0';

modeltype SPD_SEM uses 'http://palladiosimulator.org/ScalingPolicyDefinitionSemantic/1.0';


transformation BottomUpTransformation(	inout pcmAllocation : PCM_ALLOC,
										inout pcmSystem : PCM_SYS,
										inout pcmResourceEnvironment : PCM_RES_ENV,
										inout repository : PCM_REP,
										in spd : SPD_MOD,
										inout spdSemantic : SPD_SEM);
	
										
main() {
		//spd model
		var spd : SPD = spd.objects()[SPD]->any(true);
		log('Used SPD for transformation {name: '+ spd.entityName+'}');	
		//configuration
		var cfg:SPD_SEM::Configuration = spdSemantic.objects()[SPD_SEM::Configuration]->any(true);
		// Palladio models
		var resourceEnvironment : ResourceEnvironment = pcmResourceEnvironment.objects()[ResourceEnvironment]->any(true);
		var system : System = pcmSystem.objects()[System]->any(true);
		var allocation : Allocation = pcmAllocation.objects()[Allocation]->any(true);
		var repository : Repository = repository.objects()[Repository]->any(true);
		
		
		// check preconditions
		homogeneous_environment_assertion();
		
		// *********************
		// Modify infrastructure
		// *********************
		var invariantResourceContainers:Set(ResourceContainer) := Set{};		
		var elasticInfrastructureCfg : ElasticInfrastructureCfg := cfg.targetCfgs[ElasticInfrastructureCfg]->any(true);
		resourceEnvironment.resourceContainer_ResourceEnvironment->forEach(rc){
			if(elasticInfrastructureCfg.elements->excludes(rc)){
				invariantResourceContainers += rc;		
			};
		};
		
		elasticInfrastructureCfg.map transformElasticInfrastructure(cfg.enactedPolicy);
		resourceEnvironment.map modifyResourceEnvironment(elasticInfrastructureCfg, invariantResourceContainers);
		
		// *******************************
		// Modify simulated service groups
		// *******************************
		cfg.targetCfgs[ServiceGroupCfg]->map transformServiceGroup(cfg.enactedPolicy, elasticInfrastructureCfg, system, allocation);
}

helper homogeneous_environment_assertion(){
	
}

