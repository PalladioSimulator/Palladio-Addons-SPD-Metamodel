/**
* SystemQueries
* 
* A list of queries that enrich the System of PCM with operations to easier query their state.
*
*/
library TargetGroupQueries;

modeltype SPD_MOD uses 'http://palladiosimulator.org/ScalingPolicyDefinition/1.0';
modeltype SPD_ADJ uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Adjustments/1.0';
modeltype SPD_TRI uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Triggers/1.0';
modeltype SPD_TAR uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Targets/1.0';

modeltype SPD_CONT uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/Target/1.0';
modeltype SPD_SEM uses 'http://palladiosimulator.org/ScalingPolicyDefinitionSemantic/1.0';


modeltype PCM uses 'http://palladiosimulator.org/PalladioComponentModel/5.2';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_USG uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';


/**
* Helper method to select connectors that should be removed in case of a scale in.
*
* @param assembliesForDeletion - the set of AssemblyContext that will be removed after the transformation.
* @return Set of connectors that should be removed which is a union of the selection based on different connector types.
*/
query System::selectConnectorsForRemoval(assembliesForDeletion:Set(AssemblyContext)):Set(Connector){
	
	var assemblyConnectors:Set(Connector) :=  self.connectors__ComposedStructure
	->select(connector | 
		connector.oclIsTypeOf(AssemblyConnector)
		and (assembliesForDeletion->includes(connector.oclAsType(AssemblyConnector).providingAssemblyContext_AssemblyConnector)
		or assembliesForDeletion->includes(connector.oclAsType(AssemblyConnector).requiringAssemblyContext_AssemblyConnector)));
	
	var systemDelegationConnectors:Set(Connector) := self.connectors__ComposedStructure
	->select(connector | 
		connector.oclIsTypeOf(ProvidedDelegationConnector)
		and (assembliesForDeletion->includes(connector.oclAsType(ProvidedDelegationConnector).assemblyContext_ProvidedDelegationConnector)));
		
	var assemblyInfrastructureConnectors:Set(Connector) := self.connectors__ComposedStructure
	->select(connector | 
		connector.oclIsTypeOf(AssemblyInfrastructureConnector)
		and (assembliesForDeletion->includes(connector.oclAsType(AssemblyInfrastructureConnector).providingAssemblyContext__AssemblyInfrastructureConnector)
		or assembliesForDeletion->includes(connector.oclAsType(AssemblyInfrastructureConnector).requiringAssemblyContext__AssemblyInfrastructureConnector)));
	
	return assemblyConnectors->union(systemDelegationConnectors)->union(assemblyInfrastructureConnectors);
}

/**
* Helper method to select system provided roles that should be removed in case of a scale in.
* 
* Pre-condition: connectors exists. i.e. a method for removing connectors has to be called after this method.
* 
* @param assembliesForDeletion - the set of AssemblyContext that will be removed after the transformation.
* @return Set of connectors that should be removed which is a union of the selection based on different connector types.
*/
query System::selectRolesForRemoval(assembliesForDeletion:Set(AssemblyContext)):Set(OperationProvidedRole){
	
	var systemDelegationConnectorsToDeletedAssemblies:Set(ProvidedDelegationConnector) := self.connectors__ComposedStructure[ProvidedDelegationConnector]
->select(connector | assembliesForDeletion->includes(connector.oclAsType(ProvidedDelegationConnector).assemblyContext_ProvidedDelegationConnector));
	
	var providedRoles:Set(OperationProvidedRole) := self.providedRoles_InterfaceProvidingEntity[OperationProvidedRole]->select(role | systemDelegationConnectorsToDeletedAssemblies.outerProvidedRole_ProvidedDelegationConnector->includes(role));
	return providedRoles;	
}